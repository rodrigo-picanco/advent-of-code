use std::collections::BTreeMap;

fn main() {
    let input = include_str!("./input1.txt");
    let output = process_input(input);
    dbg!(output);
}

#[derive(Debug, Clone, Copy, PartialEq)]
struct Card {
    id: usize,
    matches: usize,
    checked: bool,
}

fn process_input(input: &str) -> usize {
    let mut deck = input
        .trim()
        .lines()
        .map(|line| parse_line(line))
        .map(|card| (card.id, vec![card]))
        .collect::<BTreeMap<usize, Vec<Card>>>();

    deck.
        .iter()
        .map(|(key, pile)| {
            pile.iter().map(|card| {
                for x in *key..(*key + card.matches) {
                    let pile = deck.get_mut(&x).unwrap();
                    let reward_base = pile.last().unwrap().clone();

                    pile.push(Card {
                        id: reward_base.id,
                        matches: reward_base.matches,
                        checked: false,
                    });

                    deck.insert(x, pile.to_vec());  

                }

                Card {
                    id: card.id,
                    matches: card.matches,
                    checked: true,
                }
            }).collect::<Vec<Card>>()
        })
        .flatten()
        .collect::<Vec<Card>>()
        .len()
}

fn find_matches(winning: Vec<usize>, draw: Vec<usize>) -> usize {
    let mut result = 0;
    for x in winning.to_vec() {
        for y in draw.to_vec() {
            if x == y {
                result += 1
            }
        }
    }
    result
}

fn parse_num_seq(input: &str) -> Vec<usize> {
    input
        .split(' ')
        .filter_map(|x| {
            if x.parse::<usize>().is_ok() {
                Some(x.parse::<usize>().unwrap())
            } else {
                None
            }
        })
        .collect::<Vec<usize>>()
}

fn parse_id(input: &str) -> usize {
    input.split(" ").nth(1).unwrap().parse::<usize>().unwrap()
}

fn parse_line(input: &str) -> Card {
    let id = parse_id(input.split(":").nth(0).unwrap());
    let mut seq = input.split(":").nth(1).unwrap().split("|");
    let winning = parse_num_seq(seq.nth(0).unwrap());
    let draw = parse_num_seq(seq.nth(0).unwrap());
    Card {
        id,
        matches: find_matches(winning, draw),
        checked: false,
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_parse_num_seq() {
        assert_eq!(parse_num_seq("41 48 83"), vec![41, 48, 83])
    }

    #[test]
    fn test_parse_card() {
        assert_eq!(parse_id("Card 1"), 1)
    }

    #[test]
    fn test_parse_line() {
        assert_eq!(
            parse_line("Card 1: 41 48 83 86 17 | 83 86  6 31 17  9 48 53"),
            Card {
                id: 1,
                matches: 4,
                checked: false,
            }
        )
    }

    #[test]
    fn test_find_matches() {
        assert_eq!(find_matches(vec![83, 88, 91], vec![83, 31, 77, 16, 88]), 2)
    }

    #[test]
    fn test_process() {
        assert_eq!(
            process_input(
                "
Card 1: 41 48 83 86 17 | 83 86  6 31 17  9 48 53
Card 2: 13 32 20 16 61 | 61 30 68 82 17 32 24 19
Card 3:  1 21 53 59 44 | 69 82 63 72 16 21 14  1
Card 4: 41 92 73 84 69 | 59 84 76 51 58  5 54 83
Card 5: 87 83 26 28 32 | 88 30 70 12 93 22 82 36
Card 6: 31 18 13 56 72 | 74 77 10 23 35 67 36 11
"
            ),
            30
        );
    }
}
